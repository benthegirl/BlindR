}
}
tab<-rbind(names(types),rep("-", length(types)),types,data.frame[1:nlines,])
tmp<-tempfile()
writeLines( paste0(paste(c("# ", dframename, dim(data.frame)[1], "observations of",
dim(data.frame)[2], " variables",
"\n\n"),collapse=" "), paste(apply(tab, 1, paste, collapse="|"), collapse=" \n ")),
paste0(tmp, ".Rmd"))
render(input=paste0(tmp, ".Rmd"),output_file =paste0(tmp, ".html") ,output_format = "html_document")
browseURL(paste0(tmp, ".html"))
}
hearhead(d)
library(devtools)
document()
document()
document()
document()
document()
document()
document()
document()
load_all("C:/Users/wardex/Dropbox/BlindR/BlindR")
?hearhead
data(iris)
hearhead(iris)
?render
?browseURL
data()
data("ChickWeight")
head(ChickWeight)
plot(ChickWeight$Time, ChickWeight$weight)
data(faithful)
head(faithful)
plot(faithful$eruptions, faithful$waiting)
source('C:/Users/wardex/Dropbox/BlindR/shinytactile/TactileFunction/nemeth.R')
shiny::runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/TactileFunction')
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/TactileFunction')
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/TactileFunction')
y<-"2x+1"
xmin<--10
xmax<-10
x<-seq(xmin,xmax, length.out = 150)
eval(parse(y))
eval(parse(text=y))
?tryCatch
tryCatch(eval(parse(text=y)))
### inputs
xmin<- -10
xmax<- 10
y <- "2*x+7"
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/layouttest')
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/layouttest')
?fluidPage
?wellPanel
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/layouttest')
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/layouttest')
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/layouttest')
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/layouttest')
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/layouttest')
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/layouttest')
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/layouttest')
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/layouttest')
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/layouttest')
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/layouttest')
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/layouttest')
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/layouttest')
?condtionalPanel
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/layouttest')
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/layouttest')
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/layouttest')
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/layouttest')
?reactiveVal
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/layouttest')
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/layouttest')
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/layouttest')
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/layouttest')
runApp('C:/Users/wardex/Dropbox/BlindR/shinytactile/layouttest')
runApp('ugh')
source('C:/Users/wardex/Dropbox/BlindR/shinytactile/TactileFunction/nemeth.R')
nemeth("y=.05*x^3-.1*x^2-1")
options(scipen=0)
nemeth("y=.05*x^3-.1*x^2-1")
debug(nemeth)
nemeth("y=.05*x^3-.1*x^2-1")
expr_type()
?parse_expr
parse_expr(expr_str)
rlang::parse_expr(expr_str)
is.symbol(rlang::parse_expr(expr_str))
?swtich
?switch
expr_type(rlang::parse_expr(expr_str))
e<-rlang::parse_expr(expr_str)
e[[1]]
e
length(e)
e[[2]]
e[[3]]
e[[3]][[1]]
e[[3]][[2]]
e[[3]][[3]]
length(e[[3]])
str(e)
?expression
is.expression(e)
as.list(e)
as.list(e[[3]])
e[[3]][[3]]
expr_type(e[[3]][[3]])
is.numeric(e[[3]][[3]])
?sprintf
e
expr_type <- function(x) {
if (rlang::is_syntactic_literal(x)) {
"constant"
} else if (is.symbol(x)) {
"symbol"
} else if (is.call(x)) {
"call"
} else if (is.pairlist(x)) {
"pairlist"
} else {
typeof(x)
}
}
render <- function(e) {
switch(
expr_type(e),
'constant' = paste(e),
'symbol' = render_symbol(e),
'call' = render_call(e)
)
}
render_symbol <- function(e) {
sym <- as.character(e)
symmap = list('beta' = '.b')
if (sym %in% names(symmap)) {
return(symmap[[sym]])
}
return(sym)
}
render_call <- function(e) {
fnmap <- list('=' = ' .k ',
'/' = './')
fn <- as.character(e[[1]])
if (fn == '*') {
## Multiplication stuff
left <- render(e[[2]])
right <- render(e[[3]])
if (grepl('[0-9]$', left) && grepl('^[.0-9]', right)) {
## two numerical things, explicit multiplication symbol
return(paste(left, '*', right, sep = ''))
} else {
## at least one non-numeric, so let's go implicit.
return(paste(left, right, sep = ''))
}
} else if (fn == '(') {
## Parens
return(paste('(', render(e[[2]]), ')', sep = ''))
} else if (fn %in% c('+', '-', '/', '^', '=')) {
## Other operators
if (fn %in% names(fnmap)) {
## Map operator character as needed.
fn <- fnmap[[fn]]
}
if (length(e) == 3) {
# infix
return(paste(render(e[[2]]), fn, render(e[[3]]), sep = ''))
} else {
# prefix
return(paste(fn, render(e[[2]]), sep = ''))
}
}
}
e<-".05*x^3-.1*x^2-1"
e<-parse_expr(".05*x^3-.1*x^2-1")
e<-rlang::parse_expr(".05*x^3-.1*x^2-1")
e
e[[3]]
e[[2]]
e[[1]]
e<-rlang::parse_expr(".05*x^3-.1*x^2")
e[[1]]
e[[2]]
e[[3]]
e<-rlang::parse_expr(".05*x^3")
e[[3]]
e[[2]]
typeof(e[[2]])
is.numeric(e[[2]])
e<-rlang::parse_expr("x^3")
e[[2]]
expr_type(e[[2]])
?is_syntactic_literal
library(rlang)
is_syntactic_literal("string")
is_syntactic_literal(NULL)
is_syntactic_literal(letters)
is_syntactic_literal(quote(call()))
is_syntactic_literal("a")
is_syntactic_literal(1)
x<-4
is_syntactic_literal(x)
is_syntactic_literal("x")
q1 <- quote(1)
is_expression(q1)
is_syntactic_literal(q1)
q1 <- quote(x)
is_expression(q1)
is_syntactic_literal(q1)
?sprintf
sprintf("%f", pi)
sprintf("%.3f", pi)
sprintf("%.3f", .8200)
sprintf("%1.0f", pi)
sprintf("%5.1f", pi)
sprintf("%+f", pi)
sprintf("%e", pi)
sprintf("%g", pi)
sprintf("%.3g", pi)
sprintf("%.4g", pi)
sprintf("%.4g", .8200)
sprintf("%0.4g", .8200)
?formatC
formatC(pi)
formatC(pi, digits=4)
formatC(pi, digits=4, format="f")
formatC(.8200), digits=4, format="f")
formatC(.8200, digits=4, format="f")
formatC(.8200, digits=4, format="f", drop0trailing = T)
formatC(.8200, digits=6, format="f", drop0trailing = T)
sub(pattern = "^0.",replacement = ".",formatC(.8200, digits=6, format="f", drop0trailing = T))
sub(pattern = "^0.",replacement = ".",formatC(50.8200, digits=6, format="f", drop0trailing = T))
source('C:/Users/wardex/Dropbox/BlindR/shinytactile/TactileFunction/nemeth.R')
nemeth("y=.05*x^3-.1*x^2-1")
1000000000
sub(pattern = "^0.",replacement = ".", "1e+09")
numberfixer <- function(lab) {
## equals sign
string <- gsub('=', ' = ', lab)
## # in front of numbers
string <- gsub('((?:^|\\s)-?)([.0-9]+)', '\\1#\\2', string)
## Clean up scientific notation
string <- gsub('(#[.0-9]+e)[+]?([-]?)0*([0-9]+)', '\\1"\\2\\3', string)
## Fix up colons
string <- gsub(':', '3', string)
## equals sign
string <- gsub(' = ', ' .k ', string)
return(string)
}
numberfixer("1e+09")
numberfixer("1e+03")
?gsub
numberfixer("2e+03")
numberfixer <- function(lab) {
## equals sign
string <- gsub('=', ' = ', lab)
## # in front of numbers
string <- gsub('((?:^|\\s)-?)([.0-9]+)', '\\1#\2', string)
## Clean up scientific notation
string <- gsub('(#[.0-9]+e)[+]?([-]?)0*([0-9]+)', '\\1"\\2\\3', string)
## Fix up colons
string <- gsub(':', '3', string)
## equals sign
string <- gsub(' = ', ' .k ', string)
return(string)
}
numberfixer("2e+03")
numberfixer <- function(lab) {
## equals sign
string <- gsub('=', ' = ', lab)
## # in front of numbers
string <- gsub('((?:^|\\s)-?)([.0-9]+)', '\\1#\\2', string)
## Clean up scientific notation
string <- gsub('(#[.0-9]+e)[+]?([-]?)0*([0-9]+)', '\\1"\\2\3', string)
## Fix up colons
string <- gsub(':', '3', string)
## equals sign
string <- gsub(' = ', ' .k ', string)
return(string)
}
numberfixer("2e+03")
numberfixer <- function(lab) {
## equals sign
string <- gsub('=', ' = ', lab)
## # in front of numbers
string <- gsub('((?:^|\\s)-?)([.0-9]+)', '\\1#\\2', string)
## Clean up scientific notation
string <- gsub('(#[.0-9]+e)[+]?([-]?)0*([0-9]+)', '\\1"\\2\\3', string)
## Fix up colons
string <- gsub(':', '3', string)
## equals sign
string <- gsub(' = ', ' .k ', string)
return(string)
}
numberfixer("2e+03")
numberfixer <- function(lab) {
## equals sign
string <- gsub('=', ' = ', lab)
## # in front of numbers
string <- gsub('((?:^|\\s)-?)([.0-9]+)', '\\1#\\2', string)
## Clean up scientific notation
string <- gsub('(#[.0-9]+e)[+]?([-]?)0*([0-9]+)', '\\1\\2\\3', string)
## Fix up colons
string <- gsub(':', '3', string)
## equals sign
string <- gsub(' = ', ' .k ', string)
return(string)
}
numberfixer("2e+03")
numberfixer("2e+11")
numberfixer("2e-11")
numberfixer <- function(lab) {
## equals sign
string <- gsub('=', ' = ', lab)
## # in front of numbers
string <- gsub('((?:^|\\s)-?)([.0-9]+)', '\\1#\\2', string)
## Clean up scientific notation this gives rspeak
# string <- gsub('(#[.0-9]+e)[+]?([-]?)0*([0-9]+)', '\\1\\2\\3', string)
## Clean up scientific notation
string <- gsub('(#[.0-9]+)e[+]?([-]?)0*([0-9]+)', '\\1\\2\\3', string)
## Fix up colons
string <- gsub(':', '3', string)
## equals sign
string <- gsub(' = ', ' .k ', string)
return(string)
}
numberfixer("2e-11")
numberfixer("2e-01")
numberfixer("2e+01")
numberfixer("22e+01")
numberfixer("1e+03")
numberfixer <- function(lab) {
## equals sign
string <- gsub('=', ' = ', lab)
## # in front of numbers
string <- gsub('((?:^|\\s)-?)([.0-9]+)', '\\1#\\2', string)
## Clean up scientific notation this gives rspeak
# string <- gsub('(#[.0-9]+e)[+]?([-]?)0*([0-9]+)', '\\1\\2\\3', string)
## Clean up scientific notation
string <- gsub('(#[.0-9]+)e[+]?([-]?)0*([0-9]+)', '\\1@*10^\\2\\3', string)
## Fix up colons
string <- gsub(':', '3', string)
## equals sign
string <- gsub(' = ', ' .k ', string)
return(string)
}
numberfixer("1e+03")
numberfixer("-0.2")
numberfixer("-.2")
numberfixer(".2")
-222222222
-2222000
-22000
-2200000
-220000000
-2222000000000
formatC(-2222000000000, digits=6, format="f", drop0trailing = T)
formatC(-2222, digits=6, format="f", drop0trailing = T)
formatC(-.00002222, digits=6, format="f", drop0trailing = T)
formatC(-.0000002222, digits=6, format="f", drop0trailing = T)
formatC(-.0000002222, digits=10, format="f", drop0trailing = T)
formatC(-.0000002222, digits=8, format="f", drop0trailing = T)
as.numeric("22e+04")
as.numeric("22e+07")
formatC(as.numeric("22e+07"), digits=10, format="f",drop0trailing = T)
formatC(as.numeric("22e-07"), digits=10, format="f",drop0trailing = T)
formatC(as.numeric("22e-07"), digits=20, format="f",drop0trailing = T)
formatC(as.numeric("22e-17"), digits=20, format="f",drop0trailing = T)
numberfixer <- function(lab, rspeak=F) {
## # in front of numbers
string <- gsub('((?:^|\\s)-?)([.0-9]+)', '\\1#\\2', string)
if(rspeak){
## Clean up scientific notation this gives rspeak
string <- gsub('(#[.0-9]+e)[+]?([-]?)0*([0-9]+)', '\\1\\2\\3', string)
}else{
## Clean up scientific notation
string1 <- gsub('(#[.0-9]+)e[+]?([-]?)0*([0-9]+)', '\\1@*10^\\2\\3', string)
string2 <- sub(pattern = "^0.",replacement = ".",
formatC(as.numeric(string), digits=20, format="f", drop0trailing = T))
if(nchar(string1)>nchar(string2)){
string<-string2
}else{
string<-string1
}
}
## Fix up colons
string <- gsub(':', '3', string)
return(string)
}
numberfixer(-2000)
numberfixer("-2000")
numberfixer <- function(string, rspeak=F) {
## # in front of numbers
string <- gsub('((?:^|\\s)-?)([.0-9]+)', '\\1#\\2', string)
if(rspeak){
## Clean up scientific notation this gives rspeak
string <- gsub('(#[.0-9]+e)[+]?([-]?)0*([0-9]+)', '\\1\\2\\3', string)
}else{
## Clean up scientific notation
string1 <- gsub('(#[.0-9]+)e[+]?([-]?)0*([0-9]+)', '\\1@*10^\\2\\3', string)
string2 <- sub(pattern = "^0.",replacement = ".",
formatC(as.numeric(string), digits=20, format="f", drop0trailing = T))
if(nchar(string1)>nchar(string2)){
string<-string2
}else{
string<-string1
}
}
## Fix up colons
string <- gsub(':', '3', string)
return(string)
}
numberfixer("-2000")
as.numeric(-2000)
numberfixer <- function(string, rspeak=F) {
if(rspeak){
## Clean up scientific notation this gives rspeak
string <- gsub('(#[.0-9]+e)[+]?([-]?)0*([0-9]+)', '\\1\\2\\3', string)
}else{
## Clean up scientific notation
string1 <- gsub('(#[.0-9]+)e[+]?([-]?)0*([0-9]+)', '\\1@*10^\\2\\3', string)
string2 <- sub(pattern = "^0.",replacement = ".",
formatC(as.numeric(string), digits=20, format="f", drop0trailing = T))
if(nchar(string1)>nchar(string2)){
string<-string2
}else{
string<-string1
}
}
## # in front of numbers
string <- gsub('((?:^|\\s)-?)([.0-9]+)', '\\1#\\2', string)
## Fix up colons
string <- gsub(':', '3', string)
return(string)
}
numberfixer <- function(string, rspeak=F) {
## # in front of numbers
string <- gsub('((?:^|\\s)-?)([.0-9]+)', '\\1#\\2', string)
if(rspeak){
## Clean up scientific notation this gives rspeak
string <- gsub('(#[.0-9]+e)[+]?([-]?)0*([0-9]+)', '\\1\\2\\3', string)
}else{
## Clean up scientific notation
string1 <- gsub('(#[.0-9]+)e[+]?([-]?)0*([0-9]+)', '\\1@*10^\\2\\3', string)
}
# string2 <- sub(pattern = "^0.",replacement = ".",
#                formatC(as.numeric(string), digits=20, format="f", drop0trailing = T))
# if(nchar(string1)>nchar(string2)){
#   string<-string2
# }else{
#   string<-string1
# }
# }
## Fix up colons
string <- gsub(':', '3', string)
return(string)
}
numberfixer("Here is a number: 77")
numberfixer("meet 1e+05")
numberfixer("1e+05")
numberfixer <- function(lab) {
## equals sign
string <- gsub('=', ' = ', lab)
## # in front of numbers
string <- gsub('((?:^|\\s)-?)([.0-9]+)', '\\1#\\2', string)
## Clean up scientific notation this gives rspeak
# string <- gsub('(#[.0-9]+e)[+]?([-]?)0*([0-9]+)', '\\1\\2\\3', string)
## Clean up scientific notation
string <- gsub('(#[.0-9]+)e[+]?([-]?)0*([0-9]+)', '\\1@*10^\\2\\3', string)
## Fix up colons
string <- gsub(':', '3', string)
## equals sign
string <- gsub(' = ', ' .k ', string)
return(string)
}
numberfixer("1e+05")
numberfixer <- function(lab) {
string<-lab
## # in front of numbers
string <- gsub('((?:^|\\s)-?)([.0-9]+)', '\\1#\\2', string)
## Clean up scientific notation this gives rspeak
# string <- gsub('(#[.0-9]+e)[+]?([-]?)0*([0-9]+)', '\\1\\2\\3', string)
## Clean up scientific notation
string <- gsub('(#[.0-9]+)e[+]?([-]?)0*([0-9]+)', '\\1@*10^\\2\\3', string)
## Fix up colons
string <- gsub(':', '3', string)
return(string)
}
numberfixer("1e+05")
numberfixer("meet 1e+05")
numberfixer("meet 1e+05 blah blah")
regexpr("en", txt)
txt <- c("The", "licenses", "for", "most", "software", "are",
"designed", "to", "take", "away", "your", "freedom",
"to", "share", "and", "change", "it.",
"", "By", "contrast,", "the", "GNU", "General", "Public", "License",
"is", "intended", "to", "guarantee", "your", "freedom", "to",
"share", "and", "change", "free", "software", "--",
"to", "make", "sure", "the", "software", "is",
"free", "for", "all", "its", "users")
regexpr("en", txt)
gregexpr("en", txt)
regexpr("en", txt)
regexpr('(#[.0-9]+)e[+]?([-]?)0*([0-9]+)', "blah blah 11e+05 cow")
regexpr('(#[.0-9]+)e[+]?([-]?)0*([0-9]+)', "blah blah #11e+05 cow")
txt<-"blah blah #11e+05 cow"
txt[11:18]
strsplit(txt, "")
strsplit(txt, "")[11:18]
strsplit(txt, "")[[1]][11:18]
paste(strsplit(txt, "")[[1]][12:18], collapse = "")

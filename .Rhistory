simavg = simavg(a, b)) }
allsims(theoryt[[1]], casest[[1]])
freqs<-function(a,b){
freq <- as.data.frame(table(a, b))$Freq
return(c(n11=freq[4], n00=freq[1], n10=freq[2], n01=freq[3]))
}
allsims <- function(a, b) { c(freqs(a,b),
jaccard = jaccard(a, b),
smc = smc(a, b),
dice = dice(a, b),
phi = phi(a, b),
sim1 = sim1(a, b),
sim2 = sim2(a, b),
simavg = simavg(a, b)) }
allsims(theoryt[[1]], casest[[1]])
freqs<-function(a,b){
freq <- as.data.frame(table(a, b))$Freq
return(round(c(n11=freq[4], n00=freq[1], n10=freq[2], n01=freq[3]),0))
}
allsims(theoryt[[1]], casest[[1]])
freqs<-function(a,b){
freq <- as.data.frame(table(a, b))$Freq
return(as.character(c(n11=freq[4], n00=freq[1], n10=freq[2], n01=freq[3])))
}
allsims <- function(a, b) { c(freqs(a,b),
jaccard = jaccard(a, b),
smc = smc(a, b),
dice = dice(a, b),
phi = phi(a, b),
sim1 = sim1(a, b),
sim2 = sim2(a, b),
simavg = simavg(a, b)) }
allsims(theoryt[[1]], casest[[1]])
freqs<-function(a,b){
freq <- as.data.frame(table(a, b))$Freq
return(round(c(n11=freq[4], n00=freq[1], n10=freq[2], n01=freq[3]),0))
}
allsims <- function(a, b) { c(freqs(a,b),
jaccard = jaccard(a, b),
smc = smc(a, b),
dice = dice(a, b),
phi = phi(a, b),
sim1 = sim1(a, b),
sim2 = sim2(a, b),
simavg = simavg(a, b)) }
allsims(theoryt[[1]], casest[[1]])
freqs<-function(a,b){
freq <- as.data.frame(table(a, b))$Freq
return(c(n11=freq[4], n00=freq[1], n10=freq[2], n01=freq[3]),0)
}
allsims(theoryt[[1]], casest[[1]])
freqs<-function(a,b){
freq <- as.data.frame(table(a, b))$Freq
return(c(n11=freq[4], n00=freq[1], n10=freq[2], n01=freq[3]))
}
allsims <- function(a, b) { c(freqs(a,b),
jaccard = jaccard(a, b),
smc = smc(a, b),
dice = dice(a, b),
phi = phi(a, b),
sim1 = sim1(a, b),
sim2 = sim2(a, b),
simavg = simavg(a, b)) }
allsims(theoryt[[1]], casest[[1]])
whicher<-expand.grid(1:12, 2)
sims<-round(mapply(X =whicher$Var1 , Y=whicher$Var2, FUN = function(X,Y){allsims(theoryt[[X]], casest[[Y]])}),2)
cbind(names(theoryt)[apply(sims, 1, which.max)],
apply(sims, 1, max))
cbind(apply(sims, 1, max),
names(theoryt)[apply(sims, 1, which.max)])
sims
8/12
phi(casest[[2]],theoryt[[6]])
table(casest[[2]],theoryt[[6]])
sims[1,]/sims[3,]
sims[1,]/(sims[1,]+sims[3,])
names(theoryt)
whicher<-expand.grid(1:12, 1)
sims<-round(mapply(X =whicher$Var1 , Y=whicher$Var2, FUN = function(X,Y){allsims(theoryt[[X]], casest[[Y]])}),2)
cbind(apply(sims, 1, max),
names(theoryt)[apply(sims, 1, which.max)])
sims
sims[1,]/(sims[1,]+sims[3,])
whicher<-expand.grid(1:12, 3)
sims<-round(mapply(X =whicher$Var1 , Y=whicher$Var2, FUN = function(X,Y){allsims(theoryt[[X]], casest[[Y]])}),2)
cbind(apply(sims, 1, max),
names(theoryt)[apply(sims, 1, which.max)])
whicher<-expand.grid(1:12, 4)
sims<-round(mapply(X =whicher$Var1 , Y=whicher$Var2, FUN = function(X,Y){allsims(theoryt[[X]], casest[[Y]])}),2)
cbind(apply(sims, 1, max),
names(theoryt)[apply(sims, 1, which.max)])
whicher<-expand.grid(1:12, 5)
sims<-round(mapply(X =whicher$Var1 , Y=whicher$Var2, FUN = function(X,Y){allsims(theoryt[[X]], casest[[Y]])}),2)
cbind(apply(sims, 1, max),
names(theoryt)[apply(sims, 1, which.max)])
whicher<-expand.grid(1:12, 6)
sims<-round(mapply(X =whicher$Var1 , Y=whicher$Var2, FUN = function(X,Y){allsims(theoryt[[X]], casest[[Y]])}),2)
cbind(apply(sims, 1, max),
names(theoryt)[apply(sims, 1, which.max)])
sims[1,]/(sims[1,]+sims[3,])
names(theoryt)
whicher<-expand.grid(1:12, 7)
sims<-round(mapply(X =whicher$Var1 , Y=whicher$Var2, FUN = function(X,Y){allsims(theoryt[[X]], casest[[Y]])}),2)
cbind(apply(sims, 1, max),
names(theoryt)[apply(sims, 1, which.max)])
whicher<-expand.grid(1:12, 8)
sims<-round(mapply(X =whicher$Var1 , Y=whicher$Var2, FUN = function(X,Y){allsims(theoryt[[X]], casest[[Y]])}),2)
cbind(apply(sims, 1, max),
names(theoryt)[apply(sims, 1, which.max)])
sims[1,]/(sims[1,]+sims[3,])
names(theoryt)
whicher<-expand.grid(1:12, 9)
sims<-round(mapply(X =whicher$Var1 , Y=whicher$Var2, FUN = function(X,Y){allsims(theoryt[[X]], casest[[Y]])}),2)
cbind(apply(sims, 1, max),
names(theoryt)[apply(sims, 1, which.max)])
whicher<-expand.grid(1:12, 10)
sims<-round(mapply(X =whicher$Var1 , Y=whicher$Var2, FUN = function(X,Y){allsims(theoryt[[X]], casest[[Y]])}),2)
cbind(apply(sims, 1, max),
names(theoryt)[apply(sims, 1, which.max)])
sims[1,]/(sims[1,]+sims[3,])
names(theoryt)
2^72
lapply(theoryt, sum)
whicher<-expand.grid(1:12, 10)
sims<-round(mapply(X =whicher$Var1 , Y=whicher$Var2, FUN = function(X,Y){allsims(theoryt[[X]], casest[[Y]])}),2)
cbind(apply(sims, 1, max),
names(theoryt)[apply(sims, 1, which.max)])
table(casest[[10]],theoryt[[7]])
names(theoryt)
table(casest[[10]],theoryt[[10]])
5/6
9/12
whicher<-expand.grid(1:12, 11)
sims<-round(mapply(X =whicher$Var1 , Y=whicher$Var2, FUN = function(X,Y){allsims(theoryt[[X]], casest[[Y]])}),2)
cbind(apply(sims, 1, max),
names(theoryt)[apply(sims, 1, which.max)])
sims[1,]/(sims[1,]+sims[3,])
names(theoryt)
sims
table(the1,cas)
table(the2, cas)
the1<-c(rep(1,6), rep(0,72-6))
the2<-c(rep(1,14), rep(0,72-14))
cas1<-c(rep(1,3), rep(0,72-3))
cas2<-c(rep(1,7), rep(0,72-7))
allsims(the1, cas1)
allsims(the2, cas2)
the1<-c(rep(1,6), rep(0,72-6))
the2<-c(rep(1,14), rep(0,72-14))
cas1<-c(rep(1,10), rep(0,72-10))
allsims(the1, cas1)
allsims(the2, cas1)
the2<-c(rep(1,12), rep(0,72-12))
cas1<-c(rep(1,10), rep(0,72-10))
allsims(the2, cas1)
lapply(theoryt, sum)
table(the1,cas1)
62/66
table(the2,cas1)
60/62
the2<-c(rep(1,14), rep(0,72-14))
table(the2,cas1)
58/62
10/14
lb<-function(a,b){
max(-(a*b/((1-a)*(1-b)))^.5, -((1-a)*(1-b)/(a*b))^.5)
}
ub<-function(a,b){
min((a*(1-b)/((1-a)*b))^.5, ((1-a)*b/(a*(1-b)))^.5)
}
probs<-expand.grid(seq(0,1,.1), seq(0,1,.1))
lb(.3,.4)
lbs<-mapply(FUN =lb, a=probs$Var1, b=probs$Var2)
head(lbs)
lbs
ubs<-mapply(FUN =ub, a=probs$Var1, b=probs$Var2)
ubs
bounds<-data.frame(p1=probs$Var1, p2=probs$Var2, ub=ubs, lb=lbs)
library(ggplot2)
ggplot(bounds)+geom_tile(aes(x=p1, y=p2, fill=lbs))
lb(.2,.08)
ub(.2,.08)
ggplot(bounds)+geom_tile(aes(x=p1, y=p2, fill=ubs))
bounds<-melt(bounds,id.vars = c("p1", "p2"))
head(bounds)
ggplot(bounds)+geom_tile(aes(x=p1, y=p2, fill=value))+facet_wrap(~variable)
ub(.08.2)
ub(.08,.2)
lb(.2,.25)
ub(.2,.25)
phi(the1, cas1)
6/72
ub(6/72,10/72)-lb(6/72,10/72)
phi(the1, cas1)
phi(the1, cas1)/
ub(6/72,10/72)-lb(6/72,10/72)
lb(.2,.08)
ub(.2,.08)
ub(1/3,2/3)
lb(1/3,2/3)
phi(the1, cas1)
cor(the1, cas1)
r<-rep(NA, 1000)
for(i in 1:1000){
r[i]<-cor(sample(c(0,1), size = 72, replace = T, prob = c(.8,.2)),
sample(c(0,1), size = 72, replace = T, prob = c(.92,.08)))
}
hist(r)
ub(.2,.08)
table(the1)
6/66
table(cas1)
10/72
ub(10/72,6/72)
phi(the1, cas1)
lb(10/72,6/72)
table(cas)
table(cas2)
7/72
table(the2)
14/72
phi(the2, cas1)
ub(10/72,14/72)
lb(10/72,14/72)
x1<-sample(c(0,1), size = 1000, replace = T, prob = c(.5,.5))
x2<-sample(c(0,1), size = 1000, replace = T, prob = c(.8,.2))
x3<-sample(c(0,1), size = 1000, replace = T, prob = c(.9,.1))
(x1+x2+x3)/3000
sum(x1+x2+x3)/3000
.5+.2+.1
(.5+.2+.1)/3
x1<-sample(c(0,1), size = 10000, replace = T, prob = c(.5,.5))
x2<-sample(c(0,1), size = 10000, replace = T, prob = c(.8,.2))
x3<-sample(c(0,1), size = 10000, replace = T, prob = c(.9,.1))
sum(x1+x2+x3)/30000
head(cases)
colMeans(cases)
summary(colMeans(cases[,-1]))
summary(rowMeans(theory[,-1]))
head(theory)
hist(colMeans(cases[,-1]))
hist(colMeans(theory[,-1]))
rowMeans(theory[,-1])
hist(rowMeans(theory[,-1]))
?array
N<-100
plist<-seq(0,1,.1)
mysims <- function(a, b) { c(jaccard = jaccard(a, b),
smc = smc(a, b),
phi = phi(a, b)) }
makebinaryvectors<-function(length=30, px1is1=.5, px2is1=.5, px2is1givenx1is1=.7){
getprob<-function(x, px2is1, px2is1givenx1is1){
if(x==1){
return(c(1-px2is1givenx1is1, px2is1givenx1is1))
}else{
return(c(1-px2is1, px2is1) )
}
}
x1<-sample(x=c(0,1),size = length,replace = T,prob = c(1-px1is1, px1is1))
x2<-sapply(x1, function(x){
sample(c(0,1),size = 1,prob = getprob(x, px2is1, px2is1givenx1is1) )
})
return(data.frame(x1=x1, x2=x2))
}
rslt<-array(NA, dim=c(3,N, length(plist),length(plist), length(plist)),
dimnames=list(measure=c("jaccard", "smc", "phi"),
iter=seq(0,N),
px2is1givenx1is1=as.character(plist),
px1is1=as.character(plist),
px2is1=as.character(plist)))
rslt<-array(NA, dim=c(3,N, length(plist),length(plist), length(plist)),
dimnames=list(measure=c("jaccard", "smc", "phi"),
iter=seq(0,N,1),
px2is1givenx1is1=as.character(plist),
px1is1=as.character(plist),
px2is1=as.character(plist)))
rslt<-array(NA, dim=c(3,N, length(plist),length(plist), length(plist)),
dimnames=list(measure=c("jaccard", "smc", "phi"),
iter=as.character(seq(1,N,1)),
px2is1givenx1is1=as.character(plist),
px1is1=as.character(plist),
px2is1=as.character(plist)))
for(t in 1:length(plist)){
for(k in 1:length(plist)){
for(j in 1:length(plist)){
for(i in 1:N){
vecs<-makebinaryvectors(length=72,
px1is1=plist[k],
px2is1=plist[t],
px2is1givenx1is1=plist[j])
rslt[,i,j,k,t]<-c(allsims(vecs$x1, vecs$x2), px1is1,px2is1,plist[t])
}
}
}
}
for(t in 1:length(plist)){
for(k in 1:length(plist)){
for(j in 1:length(plist)){
for(i in 1:N){
vecs<-makebinaryvectors(length=72,
px1is1=plist[k],
px2is1=plist[t],
px2is1givenx1is1=plist[j])
rslt[,i,j,k,t]<-mysims(vecs$x1, vecs$x2)
}
}
}
}
i
j
k
t
for(t in 9:length(plist)){
for(k in 1:length(plist)){
for(j in 1:length(plist)){
for(i in 1:N){
vecs<-makebinaryvectors(length=72,
px1is1=plist[k],
px2is1=plist[t],
px2is1givenx1is1=plist[j])
rslt[,i,j,k,t]<-mysims(vecs$x1, vecs$x2)
}
}
}
}
?melt
dimnames(rslt)
rslt2<=melt(rslt, value.name = "iter")
rslt2<-melt(rslt, value.name = "iter")
head(rslt2)
rslt2[4000:4010]
rslt2$iter[4000:4010]
rslt2<-melt(rslt)
head(rslt2)
rslt2$value[4000:4010]
rslt2<-ddply(rslt2, c("measure", "px2is1givenx1is1", "px1is1", "px2is1"), summarize, mean=mean(value, na.rm=T),
n=sum(!is.na(value)), sd=sd(value, na.rm=T))
head(rslt2)
ggplot(rslt2[rslt2$measure=="jaccard",])+geom_rect(x=px1is1, y=px2is1, fill=mean)+facet_wrap(~px2is1givenx1is1)
names(rslt2)
ggplot(rslt2[rslt2$measure=="jaccard",])+geom_rect(x="px1is1", y="px2is1", fill="mean")+facet_wrap(~px2is1givenx1is1)
ggplot(rslt2[rslt2$measure=="jaccard",])+geom_tile(x=px1is1, y=px2is1, fill="mean")+facet_wrap(~px2is1givenx1is1)
?geom_tile
head(rslt2[rslt2$measure=="jaccard",])
ggplot(rslt2[rslt2$measure=="jaccard",])+geom_tile(x=px1is1, y=px2is1, fill=mean)+facet_wrap(~px2is1givenx1is1)
ggplot(rslt2[rslt2$measure=="jaccard"&!is.na(rslt2$mean),])+geom_tile(x=px1is1, y=px2is1, fill=mean)+facet_wrap(~px2is1givenx1is1)
ggplot(rslt2[rslt2$measure=="jaccard"&!is.na(rslt2$mean),])+geom_tile(x=px1is1, y=px2is1, fill=mean)
ggplot(rslt2[rslt2$measure=="jaccard"&!is.na(rslt2$mean),])+geom_point(x=px1is1, y=px2is1, color=mean)
names(rslt2)
ggplot(rslt2[rslt2$measure=="jaccard"&!is.na(rslt2$mean),])+geom_point(aes(x=px1is1, y=px2is1, fill=mean))+
facet_wrap(~px2is1givenx1is1)
ggplot(rslt2[rslt2$measure=="jaccard"&!is.na(rslt2$mean),])+geom_tile(aes(x=px1is1, y=px2is1, fill=mean))+
facet_wrap(~px2is1givenx1is1)
ggplot(rslt2[rslt2$measure=="smc"&!is.na(rslt2$mean),])+geom_tile(aes(x=px1is1, y=px2is1, fill=mean))+
facet_wrap(~px2is1givenx1is1)
ggplot(rslt2[rslt2$measure=="phi"&!is.na(rslt2$mean),])+geom_tile(aes(x=px1is1, y=px2is1, fill=mean))+
facet_wrap(~px2is1givenx1is1)
wkdir()
getwd()
setwd("C:/Users/wardex/Dropbox/Research/SASB/benscode")
write.csv(rslt2,
"resultsims_phi_smc_jaccard.csv")
write.csv(rslt2,
"resultsims_phi_smc_jaccard.csv",row.names = F)
ggplot(rslt2[rslt2$measure=="phi"&!is.na(rslt2$mean),])+geom_tile(aes(x=px1is1, y=px2is1, fill=sd))+
facet_wrap(~px2is1givenx1is1)
ggplot(rslt2[rslt2$measure=="jaccard"&!is.na(rslt2$mean),])+geom_tile(aes(x=px1is1, y=px2is1, fill=sd))+
facet_wrap(~px2is1givenx1is1)
ggplot(rslt2[rslt2$measure=="smc"&!is.na(rslt2$mean),])+geom_tile(aes(x=px1is1, y=px2is1, fill=sd))+
facet_wrap(~px2is1givenx1is1)
ggplot(rslt2[rslt2$measure=="smc"&!is.na(rslt2$mean),])+geom_tile(aes(x=px1is1, y=px2is1, fill=n))+
facet_wrap(~px2is1givenx1is1)
ggplot(rslt2[rslt2$measure=="jaccard"&!is.na(rslt2$mean),])+geom_tile(aes(x=px1is1, y=px2is1, fill=n))+
facet_wrap(~px2is1givenx1is1)
ggplot(rslt2[rslt2$measure=="phi"&!is.na(rslt2$mean),])+geom_tile(aes(x=px1is1, y=px2is1, fill=n))+
facet_wrap(~px2is1givenx1is1)
rslt3<-rslt2[rslt2$px1is1%in%c(.1,.3,.5,.7,.9)&rslt2$px2is1%in%c(.1,.3,.5,.7,.9)&rslt2$px2is1givenx1is1%in%c(.1,.3,.5,.7,.9),]
ggplot(rslt3)+geom_tile(aes(x=px1is1, y=px2is1, fill=mean))+
facet_wrap(px2is1givenx1is1~measure)
rslt3<-rslt2[rslt2$px1is1%in%c(.1,.3,.5,.7,.9)&rslt2$px2is1%in%c(.1,.3,.5,.7,.9)&rslt2$px2is1givenx1is1%in%c(.1,.3,.5,.7,.9),]
ggplot(rslt3)+geom_tile(aes(x=px1is1, y=px2is1, fill=mean))+
facet_grid(px2is1givenx1is1~measure)
rslt4<-rslt3[rslt3$px1is1==rslt3$px2is1,]
ggplot(rslt3)+geom_tile(aes(x=px1is1, y=px2is1givenx1is1, fill=mean))+
facet_grid(~measure)
head(rslt3)
rslt3pretty<-dcast(rslt3,formula = px1is1+px2is1+px2is1givenx1is1~measure,value.var = "mean")
head(rslt3pretty)
write.csv(rslt3pretty,
"prettyresultsims_phi_smc_jaccard.csv",row.names = F)
propzeromatch<-function(a, b) { freq <- as.data.frame(table(a, b))$Freq
freq[1] / (freq[1]+freq[4] + freq[2] + freq[3]) }
proponematch<-function(a, b) { freq <- as.data.frame(table(a, b))$Freq
freq[4] / (freq[1]+freq[4] + freq[2] + freq[3]) }
plist<-c(.2,.5,.8)
mysims <- function(a, b) { c(jaccard = jaccard(a, b),
smc = smc(a, b),
phi = phi(a, b),
propzeromatch=propzeromatch(a,b),
proponematch=proponematch(a,b)) }
rslt<-array(NA, dim=c(5,N, length(plist),length(plist), length(plist)),
dimnames=list(measure=c("jaccard", "smc", "phi","propzeromatch","proponematch"),
iter=as.character(seq(1,N,1)),
px2is1givenx1is1=as.character(plist),
px1is1=as.character(plist),
px2is1=as.character(plist)))
for(t in 9:length(plist)){
for(k in 1:length(plist)){
for(j in 1:length(plist)){
for(i in 1:N){
vecs<-makebinaryvectors(length=72,
px1is1=plist[k],
px2is1=plist[t],
px2is1givenx1is1=plist[j])
rslt[,i,j,k,t]<-mysims(vecs$x1, vecs$x2)
}
}
}
}
rslt<-array(NA, dim=c(5,N, length(plist),length(plist), length(plist)),
dimnames=list(measure=c("jaccard", "smc", "phi","propzeromatch","proponematch"),
iter=as.character(seq(1,N,1)),
px2is1givenx1is1=as.character(plist),
px1is1=as.character(plist),
px2is1=as.character(plist)))
for(t in 1:length(plist)){
for(k in 1:length(plist)){
for(j in 1:length(plist)){
for(i in 1:N){
vecs<-makebinaryvectors(length=72,
px1is1=plist[k],
px2is1=plist[t],
px2is1givenx1is1=plist[j])
rslt[,i,j,k,t]<-mysims(vecs$x1, vecs$x2)
}
}
}
}
rslt2<-melt(rslt)
rslt2<-ddply(rslt2, c("measure", "px2is1givenx1is1", "px1is1", "px2is1"), summarize, mean=mean(value, na.rm=T),
n=sum(!is.na(value)), sd=sd(value, na.rm=T))
ggplot(rslt2)+geom_tile(aes(x=px1is1, y=px2is1, fill=mean))+
facet_grid(px2is1givenx1is1~measure)
rslt2pretty<-dcast(rslt2,formula = px1is1+px2is1+px2is1givenx1is1~measure,value.var = "mean")
write.csv(rslt2pretty,
"prettyresultsims_phi_smc_jaccard.csv",row.names = F)
head(rslt2pretty)
head(round(rslt2pretty,3))
write.csv(round(rslt2pretty,3),
"prettyresultsims_phi_smc_jaccard.csv",row.names = F)
rslt2pretty$diffinp<-rslt2pretty$px2is1-rslt2pretty$px1is1
rslt2pretty$diffinp
rslt2pretty
ggplot(rslt2pretty)+geom_tile(aes(x=diffinp, y=px2is1givenx1is1, fill=mean))+
facet_grid(~measure)
head(rslt2)
rslt2$diffinp<-rslt2$px2is1-rslt2$px1is1
ggplot(rslt2)+geom_tile(aes(x=diffinp, y=px2is1givenx1is1, fill=mean))+
facet_grid(~measure)
head(rslt2)
rslt2<-ddply(rslt2, c("measure","px2is1givenx1is1","diffinp"), summarize, mean=mean(mean))
head(rslt2)
ggplot(rslt2)+geom_tile(aes(x=diffinp, y=px2is1givenx1is1, fill=mean))+
facet_grid(~measure)
rslt2
rslt2pretty
.8+.8-.64
the1<-c(rep(1,6), rep(0,72-6))
the2<-c(rep(1,14), rep(0,72-14))
cas1<-c(rep(1,10), rep(0,72-10))
mysims(the1, cas1)
mysims(the2, cas1)
rslt2<-melt(rslt)
rslt2<-ddply(rslt2, c("measure", "px2is1givenx1is1", "px1is1", "px2is1"), summarize, mean=mean(value, na.rm=T),
n=sum(!is.na(value)), sd=sd(value, na.rm=T))
ggplot(rslt2[rslt2$measure=="smc"&!is.na(rslt2$mean),])+geom_tile(aes(x=px1is1, y=px2is1, fill=mean))+
facet_wrap(~px2is1givenx1is1)
rslt2$diffinp<-rslt2$px2is1-rslt2$px1is1
rslt2<-ddply(rslt2, c("measure","px2is1givenx1is1","diffinp"), summarize, mean=mean(mean))
ggplot(rslt2)+geom_tile(aes(x=diffinp, y=px2is1givenx1is1, fill=mean))+
facet_grid(~measure)
summary(rslt2)
str(rslt2)
table(rslt2$px2is1givenx1is1)
rslt2<-melt(rslt)
rslt2<-ddply(rslt2, c("measure", "px2is1givenx1is1", "px1is1", "px2is1"), summarize, mean=mean(value, na.rm=T),
n=sum(!is.na(value)), sd=sd(value, na.rm=T))
rslt2<-melt(rslt)
rslt2pretty$diffinp<-rslt2pretty$px2is1-rslt2pretty$px1is1
rslt2<-ddply(rslt2, c("measure","px2is1givenx1is1","diffinp"), summarize, mean=mean(value, na.rm=T))
rslt2<-melt(rslt)
rslt2$diffinp<-rslt2$px2is1-rslt2$px1is1
rslt2<-ddply(rslt2, c("measure","px2is1givenx1is1","diffinp"), summarize, mean=mean(value, na.rm=T))
ggplot(rslt2)+geom_tile(aes(x=diffinp, y=px2is1givenx1is1, fill=mean))+
facet_grid(~measure)
head(rslt2)
ggplot(rslt2)+geom_tile(aes(x=diffinp, y=px2is1givenx1is1, fill=mean))+
facet_grid(~measure)
ggplot(rslt2)+geom_point(aes(x=diffinp, y=px2is1givenx1is1))
ggplot(rslt2)+geom_point(aes(x=diffinp, y=px2is1givenx1is1))+facet_grid(.~measure)
ggplot(rslt2)+geom_point(aes(x=diffinp, y=px2is1givenx1is1, fill=mean))+facet_grid(.~measure)
ggplot(rslt2)+geom_tile(aes(x=diffinp, y=px2is1givenx1is1, fill=mean))+facet_grid(.~measure)
ggplot(rslt2)+geom_point(aes(x=diffinp, y=px2is1givenx1is1, color=mean))+facet_grid(.~measure)
ggplot(rslt2)+geom_point(aes(x=diffinp, y=px2is1givenx1is1, color=mean), size=5)+facet_grid(.~measure)
rslt2
ggplot(rslt2)+geom_tile(aes(x=as.character(diffinp), y=as.character(px2is1givenx1is1), color=mean), size=5)+facet_grid(.~measure)
ggplot(rslt2)+geom_tile(aes(x=as.character(diffinp), y=as.character(px2is1givenx1is1), fill=mean), size=5)+facet_grid(.~measure)
rslt2<-melt(rslt)
rslt2<-ddply(rslt2, c("measure", "px2is1givenx1is1", "px1is1", "px2is1"), summarize, mean=mean(value, na.rm=T),
n=sum(!is.na(value)), sd=sd(value, na.rm=T))
ggplot(rslt2)+geom_tile(aes(x=px1is1, y=px2is1, fill=mean))+
facet_grid(px2is1givenx1is1~measure)
